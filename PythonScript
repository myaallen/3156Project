# student_performance_prediction.py

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.impute import SimpleImputer
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
import os

# Load and simulate data
np.random.seed(42)
data_size = 10064
df = pd.DataFrame({
    'high_school_gpa': np.random.uniform(2.0, 4.0, data_size),
    'attendance_rate': np.random.uniform(60, 100, data_size),
    'study_time': np.random.uniform(0, 20, data_size),
    'social_media_hours': np.random.uniform(0, 5, data_size),
    'sleep_hours': np.random.uniform(4, 10, data_size),
    'final_grade': np.random.uniform(50, 100, data_size)
})

# Introduce some missing values
df.loc[df.sample(frac=0.05).index, 'sleep_hours'] = np.nan

# Impute missing values
imputer = SimpleImputer(strategy='median')
df['sleep_hours'] = imputer.fit_transform(df[['sleep_hours']])

# Define features and target
features = ['high_school_gpa', 'attendance_rate', 'study_time', 'social_media_hours', 'sleep_hours']
target = 'final_grade'
X = df[features]
y = df[target]

# Normalize features
scaler = MinMaxScaler()
X_scaled = scaler.fit_transform(X)

# Split data
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train models
rf = RandomForestRegressor(random_state=42)
xgb = XGBRegressor(random_state=42, objective='reg:squarederror')

rf.fit(X_train, y_train)
xgb.fit(X_train, y_train)

# Predict and evaluate
rf_preds = rf.predict(X_test)
xgb_preds = xgb.predict(X_test)

rf_metrics = {
    "RMSE": mean_squared_error(y_test, rf_preds, squared=False),
    "R2": r2_score(y_test, rf_preds),
    "MAE": mean_absolute_error(y_test, rf_preds)
}

xgb_metrics = {
    "RMSE": mean_squared_error(y_test, xgb_preds, squared=False),
    "R2": r2_score(y_test, xgb_preds),
    "MAE": mean_absolute_error(y_test, xgb_preds
